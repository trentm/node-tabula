#!/usr/bin/env node
/**
 * -*- mode: js -*-
 *
 * tabula -- filter a stream of JSON objects into a formatted text table
 */

var p = console.log;
var debug = console.warn;
//var debug = function () {};

var assert = require('assert-plus');
var dashdash = require('dashdash');

var pkg = require('../package.json');
var LineStream = require('lstream');
var tabula = require('../lib/tabula');



//---- globals and constants

var options = [
    {
        name: 'version',
        type: 'bool',
        help: 'Print tabula version and exit.'
    },
    {
        names: ['help', 'h'],
        type: 'bool',
        help: 'Print this help and exit.'
    },
    {
        names: ['flip'],
        type: 'bool',
        hidden: true
    },
    {
        names: ['sort', 's'],
        type: 'arrayOfString',
        help: 'Sort on the given field. Can be specified multiple times.',
        helpArg: 'FIELD'
    },
    {
        names: ['H'],
        type: 'bool',
        help: 'Skip header.'
    },
    {
        names: ['dotted-lookup'],
        type: 'bool',
        help: 'Support dotted lookup for fields. I.e. "foo.bar" means "the '
            + 'bar property of the foo object".'
    }
    // TODO
    //{
    //    names: ['file', 'f'],
    //    type: 'string',
    //    help: 'File to process',
    //    helpArg: 'FILE'
    //}
];



//---- support functions

/**
 * A hacked up version of 'process.exit' that will first drain stdout
 * before exiting. *WARNING: This doesn't stop event processing.* IOW,
 * callers have to be careful that code following this call isn't
 * accidentally executed.
 */
function drainStdoutAndExit(code) {
    debug('(drainStdoutAndExit(%d))', code);
    stdout.on('drain', function () {
        cleanupAndExit(code);
    });
    if (stdoutFlushed) {
        cleanupAndExit(code);
    }
}


/**
 * A hacked up version of 'process.exit' that will first drain stdout
 * before exiting. *WARNING: This doesn't stop event processing.* IOW,
 * callers have to be careful that code following this call isn't
 * accidentally executed.
 */
var _drainingStdout = false;
function drainStdoutAndExit(stdout, code) {
    if (_drainingStdout) {
        return;
    }
    _drainingStdout = true;
    stdout.on('drain', function () {
        process.exit(code);
    });
    stdout.on('close', function () {
        process.exit(code);
    });
    stdout.write('');
    //XXX needed?
    //if (stdoutFlushed) {
    //    process.exit(code);
    //}
}




// ---- mainline

function main(argv) {
    var parser = dashdash.createParser({options: options});
    try {
        var opts = parser.parse(process.argv);
    } catch (e) {
        console.error('tabula: error: %s', e.message);
        process.exit(1);
    }

    if (opts.help) {
        var help = parser.help({includeEnv: true}).trimRight();
        p('Filter a JSON object stream into a table, with a column for each\n'
            + 'key, or selected keys. The input must be either a JSON array\n'
            + 'of objects or a newline-separated JSON object with one object\n'
            + 'per line.\n'
            + '\n'
            + 'Usage:\n'
            + '    tabula [<options>] [<keys>...]\n'
            + '\n'
            + 'Options:\n'
            + help + '\n'
            + '\n'
            + 'Examples:\n'
            // JSSTYLED
            + '    $ echo \'[{"name":"Trent","age":41},{"name":"Ewan","age":7}]\' | tabula\n'
            + '    NAME   AGE\n'
            + '    Trent  41\n'
            + '    Ewan   7\n'
            + '\n'
            + '    # Explicit list columns. Use "lookup:name" to set column\n'
            + '    # header "name".\n'
            // JSSTYLED
            + '    $ echo \'[{"name":"Trent","age":41},{"name":"Ewan","age":7}]\' | tabula name age:YEARS\n'
            + '    NAME   YEARS\n'
            + '    Trent  41\n'
            + '    Ewan   7');
        process.exit(0);
    } else if (opts.version) {
        p('tabula ' + pkg.version);
        p(pkg.homepage);
        process.exit(0);
    } else if (opts.flip) {
        p('(╯°□°)╯︵ ┻━┻');
        process.exit(0);
    }

    var columns;
    if (opts._args.length) {
        //  "bar" -> {"lookup": "bar"}
        //  "bar:Bar" -> {"lookup": "bar", "name": "Bar"}
        columns = [];
        for (var i = 0; i < opts._args.length; i++) {
            var sepIdx = opts._args[i].indexOf(':');
            if (sepIdx === -1) {
                columns.push({lookup: opts._args[i]});
            } else {
                columns.push({
                    lookup: opts._args[i].slice(0, sepIdx),
                    name: opts._args[i].slice(sepIdx + 1)
                });
            }
        }
    }

    // Stdout error handling.
    var stdout = process.stdout;
    stdout.on('error', function (err) {
        debug('(stdout error event: %s)', err);
        if (err.code === 'EPIPE') {
            drainStdoutAndExit(stdout, 0);
        } else {
            console.warn(err);
            drainStdoutAndExit(stdout, 1);
        }
    });

    if (opts.file) {
        XXX  // TODO
        var files = opts.args;
        files.forEach(function (file) {
            streams[file] = { stream: null, records: [], done: false }
        });
        asyncForEach(files,
            function (file, next) {
                processFile(file, opts, stylize, function (err) {
                    if (err) {
                        warn('bunyan: %s', err.message);
                        retval += 1;
                    }
                    next();
                });
            },
            function (err) {
                if (err) {
                    warn('bunyan: unexpected error: %s', err.stack || err);
                    return drainStdoutAndExit(stdout, 1);
                }
                process.exit(retval);
            }
        );
    } else {
        var lstream = new LineStream({encoding: 'utf8'});
        lstream.on('error', function (err) {
            warn(err);
            drainStdoutAndExit(1);
        });

        var oneArray = undefined;
        var items = [];
        var lines = [];
        lstream.on('line', function (line) {
            line = line.trim();
            if (!line) {
                return;
            }
            if (oneArray === undefined) {  //XXX use .once() for this setup?
                if (line[0] === '[') {
                    oneArray = true;
                }
            }
            if (oneArray) {
                // TODO: would be faster to NOT lstream now, but just chunks.
                lines.push(line);
            } else {
                // TODO: *streaming* into tabula
                items.push(JSON.parse(line));
            }
        });

        //XXX I thought this needed to be `lstream.once('end', ...)` but that
        //    does nothing for me!?
        process.stdin.once('end', function () {
            if (oneArray) {
                items = JSON.parse(lines.join('\n'));
            }
            tabula(items, {
                columns: columns,
                sort: opts.sort,
                skipHeader: opts.H,
                dottedLookup: opts.dotted_lookup
            });
        });

        process.stdin.pipe(lstream);
    }
}

if (require.main === module) {
    main(process.argv);
}
